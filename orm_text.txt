1.__getattr__(self, item)
Python还有另一个机制，那就是写一个__getattr__()方法，动态返回一个属性。
class Student(object):

    def __init__(self):
        self.name = 'Michael'

    def __getattr__(self, attr):
        if attr=='score':
            return 99
当调用不存在的属性时，比如score，Python解释器会试图调用__getattr__(self, 'score')来尝试获得属性，这样，我们就有机会返回score的值。



2.with...as...
为了保证文件打开后都能关闭，使用with语句自动调用close()函数
with open('learn.txt', 'r') as f 等同于
f = open('learn.txt', 'r')



3.try...except...finally...
当我们认为某些代码可能会出错时，就可以用try来运行这段代码，如果执行出错，则后续代码不会继续执行
由except函数捕捉错误
执行完except函数后，执行finally后代码
（无论出现何种错误，均执行finally后的代码）



4.__setattr__(self, key, value)
定义了设置属性时的行为，包括在 __init__ 初始化函数中的设置行为



5.logging.info()
import logging
logging.debug('debug message')
logging.info('info message')
logging.warning('warning message')
logging.error('error message')
logging.critical('critical message')

输出：

WARNING:root:warning message
ERROR:root:error message
CRITICAL:root:critical message

可见，默认情况下Python的logging模块将日志打印到了标准输出中，且只显示了大于等于WARNING级别的日志，这说明默认的日志级别设置为WARNING（日志级别等级
CRITICAL > ERROR > WARNING > INFO > DEBUG > NOTSET）



6.*args,**kw
可变参数——*args表示接受一个元组tuple
关键字参数——**kw表示接受一个字典dict



7.路由
客户端(例如 Web 浏览器)把请求发送给 Web 服务器,Web 服务器再把请求发送给Flask程序实例。程序实例需要知道对每个 URL 请求运行哪些代码,所以保存了一个 URL 到
Python 函数的映射关系，处理 URL 和函数之间关系的程序称为路由。